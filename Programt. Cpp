#include <iostream>
using namespace std;

class A {
private:
    int privateDataA;

protected:
    int protectedDataA;

public:
    A(int pA, int pProtectedA) : privateDataA(pA), protectedDataA(pProtectedA) {}

    friend void displayData(const A &a, const B &b, const C &c);
};

class B {
private:
    int privateDataB;

protected:
    int protectedDataB;

public:
    B(int pB, int pProtectedB) : privateDataB(pB), protectedDataB(pProtectedB) {}

    friend void displayData(const A &a, const B &b, const C &c);
};

class C {
private:
    int privateDataC;

protected:
    int protectedDataC;

public:
    C(int pC, int pProtectedC) : privateDataC(pC), protectedDataC(pProtectedC) {}

    friend void displayData(const A &a, const B &b, const C &c);
};

void displayData(const A &a, const B &b, const C &c) {
    cout << "Class A - Private Data: " << a.privateDataA << ", Protected Data: " << a.protectedDataA << endl;
    cout << "Class B - Private Data: " << b.privateDataB << ", Protected Data: " << b.protectedDataB << endl;
    cout << "Class C - Private Data: " << c.privateDataC << ", Protected Data: " << c.protectedDataC << endl;
}

int main() {
    
    A a(10, 20);
    B b(30, 40);
    C c(50, 60);

    displayData(a, b, c);

    return 0;
}
